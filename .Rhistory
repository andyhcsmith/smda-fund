all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>%
mutate(date = ymd(date))
return(all_prices)
}
data = runPriceFetcher()
data %>%
ggplot(aes(x = date, y = share_price, color = ticker)) +
geom_line()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
loadEChartsLibrary()
loadEChartsLibrary()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
gc()
shiny::runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data = runPriceFetcher()
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) = c("date","share_price")
share_prices = merge(pick, share_prices)
return(share_prices)
}
runPriceFetcher <- function(){
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>%
mutate(date = ymd(date))
return(all_prices)
}
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
# Dependencies ------------------------------------------------------------
library(shiny)
library(tidyverse)
library(janitor)
library(lubridate)
library(shinycssloaders)
library(sp)
library(plotly)
library(shinymaterial)
library(quantmod)
library(ECharts2Shiny)
library(echarts4r)
getSymbols("MSB","2020-01-01", "2020-10-01")
getSymbols("MSB",from = "2020-01-01", to= "2020-10-01")
MSB
getSymbols("PLX",from = "2020-01-01", to= "2020-10-01")
getSymbols("ZM",from = "2020-01-01", to= "2020-10-01")
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
# picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
picks = read_csv('data/dummy-picks.csv',col_types = cols())
picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
picks
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data = runPriceFetcher()
View(data)
View(data)
data = runPriceFetcher()
###############################################################################
# Entrypoint for the shiny app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Dependencies ------------------------------------------------------------
library(shiny)
library(tidyverse)
library(janitor)
library(lubridate)
library(shinycssloaders)
library(sp)
library(plotly)
library(shinymaterial)
library(quantmod)
library(ECharts2Shiny)
library(echarts4r)
#  Clean Scripts ----------------------------------------------------------
source("src/helper-functions.R")
# picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
picks = read_csv('data/dummy-picks.csv',col_types = cols())
data = runPriceFetcher()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
pciks
picks
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
picks
picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
picks
pick = picks %>% slice(1)
pick
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
share_prices <- merge(pick, share_prices)
# How many shares did we purchase
start_price <- share_prices %>% filter(date == from_date) %>% select(share_price)
start_price
share_prices
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date), from_date = ymd(from_date))
share_prices
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
share_prices <- merge(pick, share_prices)
picks <- picks %>% mutate(from_date = dmy(from_date))
pick <- picks %>% slice(1)
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
share_prices <- merge(pick, share_prices)
share_prices
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == from_date) %>% select(share_price)
start_price
share_prices <- share_prices %>%
mutate(num_shares = investment/share_prices)
share_prices$num_shares <- share_prices %>%
mutate(num_shares = investment/start_price)
share_prices
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data = runPriceFetcher()
View(data)
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == from_date) %>% select(share_price)
share_prices <- share_prices %>%
mutate(num_shares = investment/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(from_date = dmy(from_date))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
return(all_prices)
}
data = runPriceFetcher()
View(data)
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == from_date) %>% select(share_price) %>% as.numeric()
start_price
share_prices <- share_prices %>%
mutate(num_shares = investment/start_price) %>%
mutate(capital = num_shares * share_price)
View(share_prices)
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
View(picks)
getSymbols("ASX:MSB","2020-01-01","2020-10-01")
getSymbols("ASX:MSB",from="2020-01-01",to="2020-10-01")
getSymbols("ASX:MSB",from="2020-01-01",to="2020-10-01")
getSymbols("MSB",from="2020-01-01",to="2020-10-01")
getSymbols("MSB",from="2020-01-01",to="2020-10-01")
getSymbols("ASX:MSB",from="2020-01-01",to="2020-10-01")
getSymbols("ASX:MSB",from="2020-01-01",to="2020-10-01")
getSymbols("MSB",from="2020-01-01",to="2020-10-01")
MSB
getSymbols("ASX:WBT",from="2020-01-01",to="2020-10-01")
getSymbols("MSB",from="2020-01-01",to="2020-10-01")
getSymbols("WBT",from="2020-01-01",to="2020-10-01")
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
gc()
picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$to_date)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
return(all_prices)
}
data = runPriceFetcher()
if(is.na(pick$date_sold)){pick$date_sold = today()}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
data = runPriceFetcher()
getSymbols("ETHNZD ")
picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
return(all_prices)
}
data = runPriceFetcher()
View(data)
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
library(shinyWidgets)
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
help("checkboxGroupButtons")
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data %>%
filter(date == max(date))
data %>%
filter(date == max(date)) %>%
group_by(analyst) %>%
summarise(stake = sum(stake), capital = sum(capital)) %>%
ungroup() %>%
filter(stake != 0) %>%
mutate(gains = capital/stake) %>%
select(analyst) %>%
as.character()
data %>%
filter(date == max(date)) %>%
group_by(analyst) %>%
summarise(stake = sum(stake), capital = sum(capital)) %>%
ungroup()
data %>%
filter(date == max(date)) %>%
group_by(analyst) %>%
summarise(stake = sum(stake), capital = sum(capital)) %>%
ungroup() %>%
filter(stake != 0)
data %>%
filter(date == max(date)) %>%
group_by(analyst) %>%
summarise(stake = sum(stake), capital = sum(capital)) %>%
ungroup() %>%
filter(stake != 0) %>%
mutate(gains = capital/stake)
data %>%
filter(date == max(date)) %>%
group_by(analyst) %>%
summarise(stake = sum(stake), capital = sum(capital)) %>%
ungroup() %>%
filter(stake != 0) %>%
mutate(gains = capital/stake) %>%
filter(gains = max(gains)) %>%
select(analyst) %>%
as.character()
data %>%
filter(date == max(date)) %>%
group_by(analyst) %>%
summarise(stake = sum(stake), capital = sum(capital)) %>%
ungroup() %>%
filter(stake != 0) %>%
mutate(gains = capital/stake) %>%
filter(gains == max(gains)) %>%
select(analyst) %>%
as.character()
data
picks
picks %>%
filter(pick == "Actual") %>%
nrow()
picks %>%
sum(stake)
sum(picks$stake)
picks
data
data %>%
filter(date == max(date)) %>%
sum(capital)
data %>%
filter(date == max(date)) %>%
select(capital) %>% sum()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data
data %>%
filter(date == max(date)) %>%
filter(capital == max(capital)) %>%
select(company) %>%
as.character()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
total_now = data %>%
filter(date == max(date)) %>%
select(capital) %>%
sum()
investment = sum(picks$stake)
total_now - investment
total_now = data %>%
filter(date == max(date)) %>%
select(capital) %>%
sum()
investment = sum(picks$stake)
(total_now - investment)/investment
total_now = data %>%
filter(date == max(date)) %>%
select(capital) %>%
sum()
investment = sum(picks$stake)
round(((total_now - investment)/investment), 2)
round(((total_now - investment)/investment), 2) * 100
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data
data %>%
filter(capital != 0) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company")
data %>%
filter(capital != 0) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company") %>%
e_mark_area(serie = "wt", data = list(
list(xAxis = "min", yAxis = "min"),
list(xAxis = "max", yAxis = "max"))
data %>%
filter(capital != 0) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company") %>%
e_mark_area(serie = "wt", data = list(
list(xAxis = "min", yAxis = "min"),
list(xAxis = "max", yAxis = "max")))
data %>%
filter(capital != 0) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company") %>%
e_mark_area(serie = "wt", data = list(
list(xAxis = "min", yAxis = "90"),
list(xAxis = "max", yAxis = "max")))
data %>%
filter(capital != 0) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company") %>%
e_mark_area(serie = "wt")
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
###############################################################################
# Entrypoint for the shiny app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Dependencies ------------------------------------------------------------
library(shiny)
library(tidyverse)
library(janitor)
library(lubridate)
library(shinycssloaders)
library(sp)
library(plotly)
library(shinymaterial)
library(quantmod)
library(ECharts2Shiny)
library(echarts4r)
library(shinyWidgets)
#  Clean Scripts ----------------------------------------------------------
source("src/helper-functions.R")
picks = read_csv('data/dummy-picks.csv',col_types = cols())
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
library(rsconnect)
rsconnect::setAccountInfo(name="<ACCOUNT>", token="<TOKEN>", secret="<SECRET>")
deployApp()
###############################################################################
# Entrypoint for the shiny app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
setwd("C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda")
deployApp()
deployApp()
