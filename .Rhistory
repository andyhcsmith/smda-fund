gs_ls()
sheet = getForm("https://spreadsheets.google.com/spreadsheet/pub",
hl ="en_US",
key = "2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH",
output = "csv",
.opts = list(followlocation = TRUE,
verbose = TRUE,
ssl.verifypeer = FALSE))
sheet = getForm("https://spreadsheets.google.com/spreadsheet/pub",
hl ="en_AU",
key = "2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH",
output = "csv",
.opts = list(followlocation = TRUE,
verbose = TRUE,
ssl.verifypeer = FALSE))
df <- read.csv(textConnection(sheet))
sheet = getForm("https://spreadsheets.google.com/spreadsheet/pub",
hl ="en_AU",
key = "2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH",
output = "csv",
.opts = list(followlocation = TRUE,
verbose = TRUE,
ssl.verifypeer = FALSE))
sheet = getForm("https://spreadsheets.google.com/spreadsheet/pub",
hl ="en_US",
key = "2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH",
output = "csv",
.opts = list(followlocation = TRUE,
verbose = TRUE,
ssl.verifypeer = FALSE))
df <- read.csv(textConnection(sheet))
sheet = getForm("https://spreadsheets.google.com/spreadsheet/pub",
hl ="en_US",
key = "2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH",
output = "csv",
.opts = list(followlocation = TRUE,
verbose = TRUE,
ssl.verifypeer = FALSE))
sheet = getForm("https://spreadsheets.google.com/spreadsheet/pub",
hl ="en_US",
key = "2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH",
output = "csv",
.opts = list(followlocation = TRUE,
verbose = TRUE,
ssl.verifypeer = FALSE))
library(googlesheets)
gs_ls()
url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pubhtml?gid=343251432&single=true")
read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pubhtml?gid=343251432&single=true"))
temp = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pubhtml?gid=343251432&single=true"))
View(temp)
temp = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
View(temp)
temp = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
View(temp)
picks = getPicksData()
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Get our picks
getPicksData <- function(){
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
return(picks)
}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
return(all_prices)
}
picks = getPicksData()
data = runPriceFetcher()
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
###############################################################################
# Entrypoint for the shiny app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Dependencies ------------------------------------------------------------
library(shiny)
library(tidyverse)
library(janitor)
library(lubridate)
library(shinycssloaders)
library(sp)
library(plotly)
library(shinymaterial)
library(quantmod)
library(ECharts2Shiny)
library(echarts4r)
library(shinyWidgets)
library(rsconnect)
library(googlesheets)
#  Clean Scripts ----------------------------------------------------------
source("src/helper-functions.R")
picks = getPicksData()
data = runPriceFetcher()
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
View(picks)
###############################################################################
# Entrypoint for the shiny app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Dependencies ------------------------------------------------------------
library(shiny)
library(tidyverse)
library(janitor)
library(lubridate)
library(shinycssloaders)
library(sp)
library(plotly)
library(shinymaterial)
library(quantmod)
library(ECharts2Shiny)
library(echarts4r)
library(shinyWidgets)
library(rsconnect)
library(googlesheets)
#  Clean Scripts ----------------------------------------------------------
source("src/helper-functions.R")
picks = getPicksData()
data = runPriceFetcher()
View(data)
runApp()
unique(picks$analyst)
unique(picks$analyst)[1]
runApp()
runApp()
runApp()
runApp()
runApp()
help("selectInput")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
picks = getPicksData()
data = runPriceFetcher()
View(data)
runApp()
runApp()
runApp()
View(data)
data = runPriceFetcher()
View(data)
warnings()
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
View(picks)
picki = 15
i = 15
pick = picks %>% slice(i)
prices = getSharePrices(pick)
pick
View(picks)
picks = getPicksData()
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
View(picks)
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
View(picks)
pick = picks %>% slice(i)
prices = getSharePrices(pick)
View(pick)
if(is.na(pick$date_sold)){pick$date_sold = today()}
pick
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices
if(is.na(pick$date_sold)){pick$date_sold = today() - 1}
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Get our picks
getPicksData <- function(){
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
return(picks)
}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today() - 1}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>% filter(!is.na(share_price))
return(all_prices)
}
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Get our picks
getPicksData <- function(){
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
return(picks)
}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>% filter(!is.na(share_price))
return(all_prices)
}
pick
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
today()
today()
getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE)
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices
help("getSymbols")
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = F))
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = FALSE))
getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = FALSE)
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
View(share_prices)
i=3
pick = picks %>% slice(i)
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
View(share_prices)
View(pick)
i=1
View(picks)
i = 14
pick = picks %>% slice(i)
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = TRUE, warnings = TRUE))
i = 15
pick = picks %>% slice(i)
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices
share_prices <- share_prices %>% mutate(date = gsub("x", "", date))
share_prices
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
share_prices
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices
View(share_prices)
if(is.na(pick$date_sold)){pick$date_sold = today()-1}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
View(share_prices)
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date))
share_prices
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date)) %>%
filter(!is.na(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
View(share_prices)
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Get our picks
getPicksData <- function(){
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
return(picks)
}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date)) %>%
filter(!is.na(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>% filter(!is.na(share_price))
return(all_prices)
}
picks = getPicksData()
data = runPriceFetcher()
View(data)
start_price
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date)) %>%
filter(!is.na(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(start_price = start_price) %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
View(share_prices)
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Get our picks
getPicksData <- function(){
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
return(picks)
}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date)) %>%
filter(!is.na(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(start_price = start_price) %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>% filter(!is.na(share_price))
return(all_prices)
}
data = runPriceFetcher()
View(data)
View(data)
data %>%
mutate(gains = (share_price/start_price)*100) %>%
group_by(date) %>%
summarise(`Total Gains` = sum(gains, na.rm = T)) %>%
ungroup() %>%
e_chart(x=date) %>%
e_line(`Total Gains`) %>%
e_title("Total Gains ($)", left = 'center') %>%
e_legend(show = FALSE)
data %>%
mutate(gains = (share_price/start_price)*100) %>%
group_by(company) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("Total Gains ($)", left = 'center') %>%
e_legend(show = FALSE)
runApp()
runApp()
runApp()
today() - 31
runApp()
runApp()
runApp()
