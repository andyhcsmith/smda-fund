output$top_analyst <- renderText({
"Andy Smith"
})
}
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data = runPriceFetcher()
picks = read_csv('data/dummy-picks.csv',col_types = cols())
picks = read_csv('Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
picks = read_csv('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda/data/dummy-picks.csv',col_types = cols())
data = runPriceFetcher()
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) = c("date","share_price")
share_prices = merge(pick, share_prices)
return(share_prices)
}
runPriceFetcher <- function(){
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
return(all_prices)
}
data = runPriceFetcher()
data
data %>%
ggplot(aes(x = date, y = share_price, color = ticker)) +
geom_line()
runPriceFetcher <- function(){
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>%
mutate(date = ymd(date))
return(all_prices)
}
data = runPriceFetcher()
data %>%
ggplot(aes(x = date, y = share_price, color = ticker)) +
geom_line()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
loadEChartsLibrary()
loadEChartsLibrary()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
gc()
shiny::runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data = runPriceFetcher()
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$to_date)){pick$to_date = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$from_date, to = pick$to_date, auto.assign = FALSE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) = c("date","share_price")
share_prices = merge(pick, share_prices)
return(share_prices)
}
runPriceFetcher <- function(){
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>%
mutate(date = ymd(date))
return(all_prices)
}
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
shiny::runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data
data = runPriceFetcher()
data
data %>%
group_by(date) %>%
summarise(`Total Capital` = sum(capital, na.rm = T)) %>%
ungroup() %>%
e_chart(x=date) %>%
e_line(`Total Capital`) %>%
e_title("Total Capital ($)", left = 'center')
View(data)
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
help"getSymbol")
help"getSymbols")
help("getSymbol")
help("getSymbola")
help("getSymbols")
getSymbols("MSB",from = "2020-01-01", to = "2020-10-01", src = "yahoo")
View(MSB)
getSymbols("ASX: MSB",from = "2020-01-01", to = "2020-10-01", src = "yahoo")
getSymbols("ASX:MSB",from = "2020-01-01", to = "2020-10-01", src = "yahoo")
getSymbols("MSB.AX",from = "2020-01-01", to = "2020-10-01", src = "yahoo")
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data
data %>%
select(date)
dates = data %>%
select(date)
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
data
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
shiny::runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
picks = getPicksData()
runApp('C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda')
setwd("C:/Users/asmi797/OneDrive/Documents/Leisure/data-projects/smda")
runApp()
runApp()
runApp()
runApp()
runApp()
data
View(data)
plot_data <- data
plot_data %>%
filter(pick == "Actual") %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
plot_data %>%
filter(pick == "Actual") %>%
mutate(gains = ((share_price/start_price)-1)*100) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(capital) %>%
e_title("Capital by Company", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
plot_data %>%
filter(pick == "Actual") %>%
mutate(gains = ((share_price/start_price)-1)*100) %>%
group_by(ticker) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("Capital by Company", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
plot_data %>%
mutate(gains = ((share_price/start_price)-1)*100) %>%
group_by(pick, date) %>%
summarise(gains = mean(gains, na.rm = T)) %>%
ungroup()
plot_data %>%
mutate(gains = ((share_price/start_price)-1)*100) %>%
group_by(pick, date) %>%
summarise(gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
group_by(pick) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("Portfolio Overview - Return %", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
plot_data %>%
mutate(gains = ((share_price/start_price)-1)*100) %>%
group_by(analyst, date) %>%
summarise(gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
group_by(analyst) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("Portfolio Overview - Return %", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
runApp()
runApp()
runApp()
runApp()
install.packages("gt")
library(gt)
picks
runApp()
runApp()
data %>%
group_by(company) %>%
filter(date = max(date))
data %>%
group_by(company) %>%
filter(date == max(date))
temp = data %>%
group_by(company) %>%
filter(date == max(date))
View(temp)
###############################################################################
# Helper functions for the SMDA app
#
# Author: Andrew Smith
# Created 2020-10-02
###############################################################################
# Get our picks
getPicksData <- function(){
picks = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vQBC7iMqU4JNUBNqzmxPt7o_blG9ritXAR0RAQmbAUFaHO4oQpnWn8cKrj9tXSxerlwc5fAIbuOxiLH/pub?gid=343251432&single=true&output=csv"))
return(picks)
}
# Takes a single company and gets the share prices between two dates
getSharePrices <- function(pick){
if(is.na(pick$date_sold)){pick$date_sold = today()}
share_prices = data.frame(getSymbols(pick$ticker, from = pick$date_picked, to = pick$date_sold, auto.assign = FALSE, warnings = TRUE))
share_prices <- tibble::rownames_to_column(share_prices, "date")
share_prices <- share_prices %>% mutate(date = gsub("X", "", date))
share_prices <- share_prices[,c(1,2)]
colnames(share_prices) <- c("date","share_price")
# Merging with other details
share_prices <- merge(pick, share_prices)
share_prices <- share_prices %>%
mutate(date = ymd(date)) %>%
filter(!is.na(date))
# How many shares did we purchase
start_price <- share_prices %>% filter(date == date_picked) %>% select(share_price) %>% as.numeric()
share_prices <- share_prices %>%
mutate(start_price = start_price) %>%
mutate(num_shares = stake/start_price) %>%
mutate(capital = num_shares * share_price) %>%
mutate(gains = ((share_price/start_price)-1)*100)
return(share_prices)
}
runPriceFetcher <- function(){
picks <- picks %>% mutate(date_picked = dmy(date_picked),
date_sold = dmy(date_sold))
all_prices = data.frame()
for (i in 1:nrow(picks)){
pick = picks %>% slice(i)
prices = getSharePrices(pick)
all_prices = rbind.data.frame(all_prices, prices)
}
all_prices <- all_prices %>% filter(!is.na(share_price))
return(all_prices)
}
data = runPriceFetcher()
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(overall_gains = mean(gains, na.rm = T)) %>%
ungroup()
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(Performance = mean(gains, na.rm = T)) %>%
ungroup() %>%
arrange(Performance)
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(Performance = mean(gains, na.rm = T)) %>%
ungroup() %>%
arrange(-Performance)
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(Performance = mean(gains, na.rm = T)) %>%
ungroup() %>%
rename(analyst = Analyst) %>%
arrange(-Performance)
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(Performance = mean(gains, na.rm = T)) %>%
ungroup() %>%
rename(Analyst = analyst) %>%
arrange(-Performance)
runApp()
data %>%
filter(date == max(date)) %>%
filter(capital == max(capital)) %>%
select(company) %>%
as.character()
data %>%
filter(date == max(date))
data %>%
filter(date == max(date)) %>%
filter(capital == max(capital))
data %>%
filter(date == max(date))
data %>%
group_by(company) %>%
filter(date == max(date))
data %>%
group_by(company) %>%
filter(date == max(date) & capital == max(capital))
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
filter(gains == max(gains))
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
filter(gains == max(gains))
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
temp = data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
View(temp)
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
filter(gains == max(gains, na.rm=T)) %>%
select(company) %>%
as.character()
plot_data %>%
group_by(analyst, date) %>%
summarise(gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
group_by(analyst) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("PGI Manager - Return %", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
plot_data <- data
plot_data %>%
group_by(analyst, date) %>%
summarise(gains = mean(gains, na.rm = T)) %>%
ungroup()
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(total_gains = mean(gains, na.rm = T))
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(total_gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
filter(total_gains == max(gains, na.rm=T)) %>%
select(analyst) %>%
as.character()
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(total_gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
filter(total_gains == max(total_gains, na.rm=T))
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
group_by(analyst) %>%
summarise(total_gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
filter(total_gains == max(total_gains, na.rm=T)) %>%
select(analyst) %>%
as.character()
picks %>%
filter(pick == "Actual") %>%
nrow()
sum(picks$stake)
total_now = data %>%
filter(date == max(date)) %>%
select(capital) %>%
sum()
investment = sum(picks$stake)
total_now
data %>%
filter(date == max(date)) %>%
select(capital)
data %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
temp = data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
View(temp)
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
sum(capital)
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(capital) %>%
sum()
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
mutate(actual_gain = stake - capital) %>%
select(actual_gain) %>%
sum()
View(temp)
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup() %>%
mutate(actual_gain = capital - stake) %>%
select(actual_gain) %>%
sum()
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
data %>%
filter(pick =="Actual") %>%
group_by(company) %>%
filter(date == max(date)) %>%
ungroup()
sum(temp$capital) / sum(temp$stake)
round(1 - (sum(temp$capital) / sum(temp$stake)), 2)
round((sum(temp$capital) / sum(temp$stake) - 1), 3)
round((sum(temp$capital) / sum(temp$stake) - 1), 4)
round((sum(temp$capital) / sum(temp$stake) - 1) * 100, 2)
runApp()
runApp()
plot_data %>%
group_by(pick, date) %>%
summarise(gains = mean(gains, na.rm = T)) %>%
ungroup() %>%
group_by(pick) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("Portfolio Overview - Return %", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
plot_data %>%
group_by(company) %>%
e_chart(x=date) %>%
e_line(gains) %>%
e_title("PGI Manager - Return %", left = 'center') %>%
e_legend(orient = "horizontal", top = "bottom")
runApp()
deployApp()
